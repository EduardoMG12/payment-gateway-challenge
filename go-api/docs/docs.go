// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts": {
            "get": {
                "description": "Returns a list of all accounts, with pagination support.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get all accounts with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Account"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new account with a username.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Create a new account",
                "parameters": [
                    {
                        "description": "Account data for creation",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Account"
                        }
                    }
                }
            }
        },
        "/accounts/{accountId}/balance": {
            "get": {
                "description": "Retrieves the current balance for a specific account.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get Account Balance",
                "operationId": "get-account-balance",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balance retrieved from cache",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseAccountBalance"
                        }
                    },
                    "202": {
                        "description": "Balance calculation triggered",
                        "schema": {
                            "$ref": "#/definitions/dto.ProcessingResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/cards": {
            "post": {
                "description": "Creates a fictional card and associates it with an account.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Create a new card",
                "operationId": "create-card",
                "parameters": [
                    {
                        "description": "Account ID",
                        "name": "card",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCardRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Card created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.CardResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Failed to create card",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/cards/{accountId}": {
            "get": {
                "description": "Returns a list of all cards associated with an account, ordered by creation date.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Get all cards by account ID",
                "operationId": "get-cards-by-account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CardResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid account ID",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve cards",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/transactions": {
            "post": {
                "description": "Creates a new transaction (DEPOSIT, PURCHASE, REFUND, CHARGE) in the payment gateway.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Create a new transaction",
                "operationId": "create-transaction",
                "parameters": [
                    {
                        "description": "Transaction data",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Transaction created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseCreateTransactionRequest"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "URL of the created transaction"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation failed",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "422": {
                        "description": "Business rule violation (e.g. insufficient funds)",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/transactions/test/{accountId}": {
            "get": {
                "description": "Retrieves a list of all transactions for an account, ordered by creation date (desc).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get All Transactions for an Account (Test)",
                "operationId": "get-transactions-test",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ResponseCreateTransactionRequest"
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        },
        "/transactions/{accountId}": {
            "get": {
                "description": "Returns a list of transactions for a specific account.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get transactions by Account ID",
                "operationId": "get-transactions-by-account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "accountId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ResponseCreateTransactionRequest"
                            }
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.CardResponse": {
            "description": "Response when a card is created",
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "e252f5dd-ded2-4a30-a4a5-6e2940008d54"
                },
                "card_token": {
                    "type": "string",
                    "example": "5b7c16af7278094cd14bd041079111ed00fa832c8a460d8e3f40156408d99475"
                },
                "created_at": {
                    "type": "string",
                    "example": "2025-09-22T19:15:24.526505Z"
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "last_four_digits": {
                    "type": "string",
                    "example": "8995"
                }
            }
        },
        "dto.CreateAccountRequest": {
            "type": "object",
            "required": [
                "username"
            ],
            "properties": {
                "username": {
                    "description": "@Description The username of the new account.\n@Example charlie",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                }
            }
        },
        "dto.CreateCardRequest": {
            "description": "Request body for creating a new card",
            "type": "object",
            "required": [
                "account_id"
            ],
            "properties": {
                "account_id": {
                    "description": "@Description Account ID to associate the new card (UUID)\n@Example e252f5dd-ded2-4a30-a4a5-6e2940008d54",
                    "type": "string"
                }
            }
        },
        "dto.CreateTransactionRequest": {
            "description": "Request body for creating a new transaction",
            "type": "object",
            "required": [
                "account_id",
                "amount_cents",
                "type"
            ],
            "properties": {
                "account_id": {
                    "description": "@Description The account's ID for which the transaction will be performed (UUID).",
                    "type": "string",
                    "example": "e7b40123-cb12-41fa-b5bc-5a128448027e"
                },
                "amount_cents": {
                    "description": "@Description Transaction amount in cents. Must be positive.",
                    "type": "integer",
                    "example": 10000
                },
                "card_token": {
                    "description": "@Description The credit card token (optional for some transaction types like DEPOSIT).",
                    "type": "string",
                    "maxLength": 126,
                    "minLength": 20,
                    "example": "16ecac04-9e45-4a5b-b7d4-d6c1c66bafd6"
                },
                "refund_transaction_id": {
                    "description": "@Description The ID of the transaction being refunded (only for REFUND).",
                    "type": "string",
                    "example": "3c2b4791-7f84-4d77-b2e0-56de8df97f33"
                },
                "type": {
                    "description": "@Description Transaction type: DEPOSIT, PURCHASE, REFUND, CHARGE",
                    "type": "string",
                    "enum": [
                        "DEPOSIT",
                        "PURCHASE",
                        "REFUND",
                        "CHARGE"
                    ],
                    "example": "PURCHASE"
                }
            }
        },
        "dto.ProcessingResponse": {
            "description": "Response when balance calculation is processing",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "The account balance is being calculated. Please try again later."
                },
                "status": {
                    "type": "string",
                    "example": "processing"
                }
            }
        },
        "dto.ResponseAccountBalance": {
            "description": "Response for account balance",
            "type": "object",
            "properties": {
                "balance_cents": {
                    "type": "integer",
                    "example": 10000
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "dto.ResponseCreateTransactionRequest": {
            "description": "Response returned when a transaction is created or queried",
            "type": "object",
            "properties": {
                "account_id": {
                    "type": "string",
                    "example": "e7b40123-cb12-41fa-b5bc-5a128448027e"
                },
                "amount_cents": {
                    "type": "integer",
                    "example": 10000
                },
                "card_id": {
                    "type": "string",
                    "example": "16ecac04-9e45-4a5b-b7d4-d6c1c66bafd6"
                },
                "type": {
                    "type": "string",
                    "example": "PURCHASE"
                }
            }
        },
        "models.Account": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "@Description Timestamp when the account was created (UTC, RFC3339 format).\n@Format date-time\n@Example 2025-09-22T19:15:24.526505Z",
                    "type": "string"
                },
                "id": {
                    "description": "@Description Unique identifier of the account (UUID).\n@Format uuid\n@Example 550e8400-e29b-41d4-a716-446655440000",
                    "type": "string"
                },
                "updated_at": {
                    "description": "@Description Timestamp of the last account update (UTC, RFC3339 format).\n@Format date-time\n@Example 2025-09-22T19:15:24.526505Z",
                    "type": "string"
                },
                "username": {
                    "description": "@Description Unique username chosen by the account owner. Must be unique across the system.\n@MinLength 3\n@MaxLength 32\n@Example charlie",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Payment Gateway API",
	Description:      "This is a main payment-gateway API .",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

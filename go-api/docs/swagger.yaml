basePath: /
definitions:
  api.APIError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  dto.CardResponse:
    description: Response when a card is created
    properties:
      account_id:
        example: e252f5dd-ded2-4a30-a4a5-6e2940008d54
        type: string
      card_token:
        example: 5b7c16af7278094cd14bd041079111ed00fa832c8a460d8e3f40156408d99475
        type: string
      created_at:
        example: "2025-09-22T19:15:24.526505Z"
        type: string
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      last_four_digits:
        example: "8995"
        type: string
    type: object
  dto.CreateAccountRequest:
    properties:
      username:
        description: |-
          @Description The username of the new account.
          @Example charlie
        maxLength: 100
        minLength: 3
        type: string
    required:
    - username
    type: object
  dto.CreateCardRequest:
    description: Request body for creating a new card
    properties:
      account_id:
        description: |-
          @Description Account ID to associate the new card (UUID)
          @Example e252f5dd-ded2-4a30-a4a5-6e2940008d54
        type: string
    required:
    - account_id
    type: object
  dto.CreateTransactionRequest:
    description: Request body for creating a new transaction
    properties:
      account_id:
        description: '@Description The account''s ID for which the transaction will
          be performed (UUID).'
        example: e7b40123-cb12-41fa-b5bc-5a128448027e
        type: string
      amount_cents:
        description: '@Description Transaction amount in cents. Must be positive.'
        example: 10000
        type: integer
      card_token:
        description: '@Description The credit card token (optional for some transaction
          types like DEPOSIT).'
        example: 16ecac04-9e45-4a5b-b7d4-d6c1c66bafd6
        maxLength: 126
        minLength: 20
        type: string
      refund_transaction_id:
        description: '@Description The ID of the transaction being refunded (only
          for REFUND).'
        example: 3c2b4791-7f84-4d77-b2e0-56de8df97f33
        type: string
      type:
        description: '@Description Transaction type: DEPOSIT, PURCHASE, REFUND, CHARGE'
        enum:
        - DEPOSIT
        - PURCHASE
        - REFUND
        - CHARGE
        example: PURCHASE
        type: string
    required:
    - account_id
    - amount_cents
    - type
    type: object
  dto.ProcessingResponse:
    description: Response when balance calculation is processing
    properties:
      message:
        example: The account balance is being calculated. Please try again later.
        type: string
      status:
        example: processing
        type: string
    type: object
  dto.ResponseAccountBalance:
    description: Response for account balance
    properties:
      balance_cents:
        example: 10000
        type: integer
      id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    type: object
  dto.ResponseCreateTransactionRequest:
    description: Response returned when a transaction is created or queried
    properties:
      account_id:
        example: e7b40123-cb12-41fa-b5bc-5a128448027e
        type: string
      amount_cents:
        example: 10000
        type: integer
      card_id:
        example: 16ecac04-9e45-4a5b-b7d4-d6c1c66bafd6
        type: string
      type:
        example: PURCHASE
        type: string
    type: object
  models.Account:
    properties:
      created_at:
        description: |-
          @Description Timestamp when the account was created (UTC, RFC3339 format).
          @Format date-time
          @Example 2025-09-22T19:15:24.526505Z
        type: string
      id:
        description: |-
          @Description Unique identifier of the account (UUID).
          @Format uuid
          @Example 550e8400-e29b-41d4-a716-446655440000
        type: string
      updated_at:
        description: |-
          @Description Timestamp of the last account update (UTC, RFC3339 format).
          @Format date-time
          @Example 2025-09-22T19:15:24.526505Z
        type: string
      username:
        description: |-
          @Description Unique username chosen by the account owner. Must be unique across the system.
          @MinLength 3
          @MaxLength 32
          @Example charlie
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a main payment-gateway API .
  title: Payment Gateway API
  version: "1.0"
paths:
  /accounts:
    get:
      description: Returns a list of all accounts, with pagination support.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
      summary: Get all accounts with pagination
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Creates a new account with a username.
      parameters:
      - description: Account data for creation
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Account'
      summary: Create a new account
      tags:
      - accounts
  /accounts/{accountId}/balance:
    get:
      description: Retrieves the current balance for a specific account.
      operationId: get-account-balance
      parameters:
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Balance retrieved from cache
          schema:
            $ref: '#/definitions/dto.ResponseAccountBalance'
        "202":
          description: Balance calculation triggered
          schema:
            $ref: '#/definitions/dto.ProcessingResponse'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Get Account Balance
      tags:
      - accounts
  /cards:
    post:
      consumes:
      - application/json
      description: Creates a fictional card and associates it with an account.
      operationId: create-card
      parameters:
      - description: Account ID
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCardRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Card created successfully
          schema:
            $ref: '#/definitions/dto.CardResponse'
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Failed to create card
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Create a new card
      tags:
      - cards
  /cards/{accountId}:
    get:
      description: Returns a list of all cards associated with an account, ordered
        by creation date.
      operationId: get-cards-by-account
      parameters:
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CardResponse'
            type: array
        "400":
          description: Invalid account ID
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Failed to retrieve cards
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Get all cards by account ID
      tags:
      - cards
  /transactions:
    post:
      consumes:
      - application/json
      description: Creates a new transaction (DEPOSIT, PURCHASE, REFUND, CHARGE) in
        the payment gateway.
      operationId: create-transaction
      parameters:
      - description: Transaction data
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Transaction created successfully
          headers:
            Location:
              description: URL of the created transaction
              type: string
          schema:
            $ref: '#/definitions/dto.ResponseCreateTransactionRequest'
        "400":
          description: Invalid request body or validation failed
          schema:
            $ref: '#/definitions/api.APIError'
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/api.APIError'
        "422":
          description: Business rule violation (e.g. insufficient funds)
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Create a new transaction
      tags:
      - transactions
  /transactions/{accountId}:
    get:
      description: Returns a list of transactions for a specific account.
      operationId: get-transactions-by-account
      parameters:
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ResponseCreateTransactionRequest'
            type: array
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Get transactions by Account ID
      tags:
      - transactions
  /transactions/test/{accountId}:
    get:
      description: Retrieves a list of all transactions for an account, ordered by
        creation date (desc).
      operationId: get-transactions-test
      parameters:
      - description: Account ID
        in: path
        name: accountId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ResponseCreateTransactionRequest'
            type: array
        "404":
          description: Account not found
          schema:
            $ref: '#/definitions/api.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/api.APIError'
      summary: Get All Transactions for an Account (Test)
      tags:
      - transactions
schemes:
- http
swagger: "2.0"
